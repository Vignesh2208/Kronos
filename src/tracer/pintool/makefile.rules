##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := inscount_tls

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := inscount_tls

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

$(OBJDIR)cJSON$(OBJ_SUFFIX): cJSON.c
	$(CXX) -std=c++11 -fPIC $(TOOL_CXXFLAGS_NOOPT) $(COMP_OBJ)$@ $<

$(OBJDIR)inscount_tls$(OBJ_SUFFIX): inscount_tls.cpp
	$(CXX) -std=c++11 -fPIC $(TOOL_CXXFLAGS_NOOPT) $(COMP_OBJ)$@ $<

# Build the intermediate object file.
#$(OBJDIR)VT_functions$(OBJ_SUFFIX): VT_functions.c VT_functions.h utility_functions.h
#	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

#$(OBJDIR)utility_functions$(OBJ_SUFFIX): utility_functions.c utility_functions.h
#	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Build the tool as a dll (shared object).
$(OBJDIR)inscount_tls$(PINTOOL_SUFFIX): $(OBJDIR)inscount_tls$(OBJ_SUFFIX) $(OBJDIR)cJSON$(OBJ_SUFFIX)
	echo "Linker = ", $(LINKER)
	echo "TOOL_LDFLAGS_NOOPT = ", $(TOOL_LDFLAGS_NOOPT)
	echo "LINK_EXE = ", $(LINK_EXE)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(OBJDIR)cJSON$(OBJ_SUFFIX) $(LINK_EXE)$@ $< $(TOOL_LPATHS) $(TOOL_LIBS)

